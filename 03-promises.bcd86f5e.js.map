{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAGMC,EAAeC,SAASC,cAAc,SACtCC,EAAkBF,SAASC,cAAc,kBACzCE,EAAiBH,SAASC,cAAc,iBACxCG,EAAcJ,SAASC,cAAc,mBAkC3C,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAGpCJ,EAAQ,CAAEH,WAAUC,UAGpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IA3CPR,EAAae,iBAAiB,UAAU,SAAAC,GACtCA,EAAMC,iBAEN,IAAMC,EAAaC,OAAOhB,EAAgBiB,OACpCC,EAAYF,OAAOf,EAAegB,OAClCE,EAASH,OAAOd,EAAYe,OAC9BG,EAAQL,EAEZM,EAAA1B,GAAS2B,OAAOC,OAChBF,EAAA1B,GAAS2B,OAAOE,MAAM,CACpBC,SAAS,IAGX,IAAK,IAAIC,EAAI,EAAGA,GAAKP,EAAQO,IAC3BvB,EAAcuB,EAAGN,GACdO,MAAK,SAAAC,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MAEjBgB,EAAA1B,GAAS2B,OAAOO,QACd,uBAAwCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IAGjD0B,OAAM,SAAAH,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MAElBgB,EAAA1B,GAAS2B,OAAOU,QACd,sBAAqCF,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IAIjDe,GAASF,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.6.min.css';\n\nconst promisesForm = document.querySelector('.form');\nconst firstDelayInput = document.querySelector('[name=\"delay\"]');\nconst delayStepInput = document.querySelector('[name=\"step\"]');\nconst amountInput = document.querySelector('[name=\"amount\"]');\n\npromisesForm.addEventListener('submit', event => {\n  event.preventDefault();\n\n  const firstDelay = Number(firstDelayInput.value);\n  const delayStep = Number(delayStepInput.value);\n  const amount = Number(amountInput.value);\n  let delay = firstDelay;\n\n  Notiflix.Notify.init();\n  Notiflix.Notify.merge({\n    useIcon: false,\n  });\n\n  for (let i = 1; i <= amount; i++) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        //console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        //console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n\n    delay += delayStep;\n  }\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$promisesForm","document","querySelector","$ce04d3a99e08e73b$var$firstDelayInput","$ce04d3a99e08e73b$var$delayStepInput","$ce04d3a99e08e73b$var$amountInput","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","firstDelay","Number","value","delayStep","amount","delay1","$parcel$interopDefault","Notify","init","merge","useIcon","i","then","param","success","concat","catch","failure"],"version":3,"file":"03-promises.bcd86f5e.js.map"}